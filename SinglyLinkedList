#include <iostream>
using namespace std;

// Initializing Node
class node{
	public:
	int data;
	node* next = NULL;

	// constructor
	node(int data){
		this->data = data;
		this->next = NULL;
	}

	// destructor
	~node(){
		int value = this->data;
		if(this->next == NULL){
			delete next;
			this->next = NULL;
		}
	}
};


// Insertion at Head
void insertAtHead(node* &head, int d) {

    // new node create
    node* temp = new node(d);
    temp -> next = head;
    head = temp;
}

// insertion at Tail
void insertAtTail(node* &tail, int d){
	//new node created
	node* temp = new node(d);
	//link to the previous node
	tail->next = temp;
	// update tail
	tail = temp;
}

// Insertion at a given Position
void insertAtPosition(node* &tail, node* &head, int position, int d){

	// insert at Start Position
	if(position==1){
		insertAtHead(head, d);
		return;
	}

	node* temp = head;
	int count = 1;

	while(count<position-1){
		temp = temp->next;
		count++;
	}

	// inserting at last position
	if(temp->next == NULL){
		insertAtTail(tail,d);
		return;
	}

	// Any other position
	node* insert = new node(d);

	insert->next = temp->next;
	temp->next = insert;
}

// Printing Linkedlist
void print(node* &head){
	node* temp = head;
	while(temp!=NULL){
		cout << temp->data << " ";
		temp = temp->next;
	}
	cout << endl;
}

// Deletion in a linked list
void deleteList(int position, node* &head){

	// deleting start or first node 
	if(position == 1){
		node* temp = head;
		head = head->next;

		temp->next = NULL;
		delete temp;
	}

	// deleting any middle or last node 
	else{
		node* curr = head;
		node* prev = NULL;

		int count = 1;
		while(count < position){
			prev = curr;
			curr = curr->next;
			count++;
		}

		prev->next = curr->next;

		curr->next = NULL;
		delete curr;
	}
}

int main(){

	node* node1 = new node(10);

	node* head = node1;
	// point to tail
	node* tail = node1;


	print(head);
	insertAtTail(tail, 12);
	print(head);

	insertAtTail(tail, 15);
	print(head);

	insertAtTail(tail, 18);
	print(head);

	insertAtPosition(tail, head, 1, 8);
	print(head);

	cout << "Head is: "<< head->data << endl;
	cout << "Tail is: "<< tail->data << endl;
	cout<<endl;

	deleteList(1 , head);
	print(head);
	cout<<endl;

	cout << "Head is: "<< head->data << endl;
	cout << "Tail is: "<< tail->data << endl;

}
