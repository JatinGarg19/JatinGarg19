
// Quick Sort using Recursion.

#include<iostream>
using namespace std;

int partition(int arr[], int s, int e) {
    int pivot=arr[s];    // initializing pivot 
    int count=0;         // initializing count
    
    for(int i=s+1; i<=e; i++) {
        if(arr[i]<=pivot)
            count++;
    }
    
    int pivotIndex=s+count;
    swap(arr[pivotIndex],arr[s]);
    
    int i=s, j=e;
    while(i<pivotIndex && j>pivotIndex) {
        while(arr[i]<pivot) {
            i++;
        }
        while(arr[j]>pivot) {
            j--;
        }
        if(i<pivotIndex && j>pivotIndex) {
            swap(arr[i++],arr[j--]);
        }
    }
    return pivotIndex;
}

void quickSort(int arr[], int s, int e) {
    //base case
    if(s>=e) {
        return;
    }
    // partition
    int p = partition(arr,s,e);
    // recursive call
    quickSort(arr,s,p-1);
    // recursive call
    quickSort(arr,p+1,e);
    
}

int main()
{
    int arr[6] = {3, 5, 1, 8, 2, 4};
    int n=6;
    
    quickSort(arr, 0, n-1);
    
    for (int i = 0; i < 6; i++) {
        cout<<arr[i]<<" ";
    } cout<<endl;
    
    return 0;
}
